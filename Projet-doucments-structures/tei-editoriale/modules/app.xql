xquery version "3.1";

module namespace app="http://localhost:8080/exist/apps/hello/templates";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://localhost:8080/exist/apps/hello/config" at "config.xqm";

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute data-template="app:test" 
 : or class="app:test" (deprecated). The function has to take at least 2 default
 : parameters. Additional parameters will be mapped to matching request or session parameters.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};

declare function app:XMLtoHTML1 ($node as node(), $model as map (*)) {
let $xml:=(
        doc("/db/apps/hello/data/MadameBovary.xml"),
        doc("/db/apps/hello/data/Siddhartha.xml"),
        doc("/db/apps/hello/data/WutheringHeights.xml")
        )
let $xsl := doc("/db/apps/hello/modules/trans_xml_html.xsl")
let $params :=
<parameters>
   {for $p in request:get-parameter-names()
    let $val := request:get-parameter($p,())
    where  not($p = ("document","directory","stylesheet"))
    return
       <param name="{$p}"  value="{$val}"/>
   }
</parameters>

return
    transform:transform($xml, $xsl, $params)
};

declare function app:XMLtoHTML2 ($node as node(), $model as map (*)) {
let $xml := doc("/db/apps/hello/data/page_accuel.xml")
let $xsl := doc("/db/apps/hello/modules/trans2.xsl")
let $params :=
<parameters>
   {for $p in request:get-parameter-names()
    let $val := request:get-parameter($p,())
    where  not($p = ("document","directory","stylesheet"))
    return
       <param name="{$p}"  value="{$val}"/>
   }
</parameters>

return
    transform:transform($xml, $xsl, $params)
};